package com.pai.ClientService;

import com.pai.ClientSchema.*;
import com.pai.ClientSchema.utils.SchemaConversionUtils;
import com.pai.model.Department;
import com.pai.model.Employee;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.ws.WebServiceMessageFactory;
import org.springframework.ws.client.WebServiceFaultException;
import org.springframework.ws.client.core.support.WebServiceGatewaySupport;
import javax.xml.bind.JAXBElement;
import javax.xml.datatype.DatatypeConfigurationException;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.*;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 * This class implements methods for working
 * with data used in functioning web application
 *
 * Webapp will worked over SOAP
 *
 * @author Aliaksandr Parfianiuk frombrest@gmail.com
 *
 */

public class WebAppServiceImpl extends WebServiceGatewaySupport implements WebAppService {

    /**
     * log4j Logger object
     */
    private final static Logger logger = LogManager.getLogger(WebAppServiceImpl.class);

    /**
     * Method for checking date format (yyyy-MM-dd)
     * @param date String with date
     * @return boolean value
     */
    private boolean dateChecker(String date) {
        Pattern p = Pattern.compile("^\\d{4}\\-(0?[1-9]|1[012])\\-(0?[1-9]|[12][0-9]|3[01])$");
        Matcher m = p.matcher(date);
        return m.matches();
    }

    /**
     * Constructor for injection the message factory
     * @param messageFactory spring bean (message factory)
     */
    public WebAppServiceImpl(WebServiceMessageFactory messageFactory) {
        super(messageFactory);
    }

    /**
     * Factory object for creating requests (generated by JAXB)
     */
    private ObjectFactory objectFactory = new ObjectFactory();

    /**
     * Method returns a map of appropriate values id of the departments and the average salary
     * @return  Map{Key: Department id; Value: Average salary} for all departments
     */
    @Override
    public Map<Integer, Double> getAverageSalary() {
        Map<Integer, Double> result = new HashMap<>();
        DecimalFormatSymbols separatorSymbol = new DecimalFormatSymbols();
        separatorSymbol.setDecimalSeparator('.');
        DecimalFormat df = new DecimalFormat("#0.00", separatorSymbol);
        Department[] deps = this.getDepartments();
        for (Department department:deps){
            logger.debug("A.S. for Department with id: "+ department.getId());
            Employee[] empls = this.getEmployeesByDepartmentId(department.getId());
            double avsalary = 0;
            if(empls.length>0) {
                for (Employee employee : empls)
                    avsalary += employee.getSalary();
                avsalary /= empls.length;
                logger.debug("A.S. for Department "+ department.getId()+" is: " + new Double(df.format(avsalary)));
                result.put(department.getId(), new Double(df.format(avsalary)));
            } else {
                logger.debug("A.S. for Department "+ department.getId()+" is: 0.00");
                result.put(department.getId(),0.00);
            }
        }
        return result;
    }

    /**
     * Method return an array of employees of the target
     * department were born in the target date
     * @param departmentId ID of the target department
     * @param dateOfBirth target date
     * @return list of entity employees
     */
    @Override
    public List<Employee> searchEmployeesByDateOfBirth(int departmentId, String dateOfBirth) {
        if (!this.dateChecker(dateOfBirth))
            throw new WebServiceFaultException("Bad date format");
        List<Employee> result = new ArrayList<>();
        logger.debug("Show employees form department:" + departmentId + " with filter by date of birth:" + dateOfBirth);
        Employee[] employees = this.getEmployeesByDepartmentId(departmentId);
        for (Employee employee:employees){
            if (employee.getDate_of_birth().toString().equals(dateOfBirth)){
                result.add(employee);
            }
        }
        return result;
    }

    /**
     * Method return an array of employees of the target
     * department born between the dates
     * @param departmentId ID of the target department
     * @param dateFrom start date of period
     * @param dateTo date of end of period
     * @return list of entity employees
     */
    @Override
    public List<Employee> searchEmployeesByIntervalOfBirthdates(int departmentId, String dateFrom, String dateTo) {
        logger.debug("Show employees form department:" + departmentId + " with filter by interval of birth dates from:" + dateFrom + " to:"+ dateTo);
        List<Employee> result = new ArrayList<>();
        Employee[] employees = this.getEmployeesByDepartmentId(departmentId);
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        Date employerDate = new java.util.Date();
        Date toDate = new java.util.Date();
        Date fromDate = new java.util.Date();
        if ((dateFrom.length()==0) & (dateTo.length()!=0)){
            //born before date_to
            for (Employee employee:employees){
                try {
                    employerDate = sdf.parse(employee.getDate_of_birth().toString());
                    toDate = sdf.parse(dateTo);
                } catch (ParseException exc) {
                    throw new WebServiceFaultException("Bad date format");
                }

                if (employerDate.compareTo(toDate)<=0){
                    result.add(employee);
                }
            }
        } else if ((dateFrom.length()!=0) & (dateTo.length()==0)){
            //born after date_from
            for (Employee employee:employees){
                try {
                    employerDate = sdf.parse(employee.getDate_of_birth().toString());
                    fromDate = sdf.parse(dateFrom);
                } catch (ParseException exc) {
                    throw new WebServiceFaultException("Bad date format");
                }
                if (employerDate.compareTo(fromDate)>=0){
                    result.add(employee);
                }
            }
        } else {
            //born between date_from and date_to
            for (Employee employee:employees){
                try {
                    employerDate = sdf.parse(employee.getDate_of_birth().toString());
                    fromDate = sdf.parse(dateFrom);
                    toDate = sdf.parse(dateTo);
                } catch (ParseException exc) {
                    throw new WebServiceFaultException("Bad date format");
                }
                if ((employerDate.compareTo(fromDate)>=0) & (employerDate.compareTo(toDate)<=0)){
                    result.add(employee);
                }
            }
        }
        return result;
    }

    /**
     * Method perform request to SOAP service for create department
     * @param department entity of the created department
     */
    @Override
    public void createDepartment(Department department) {
        AddDepartmentRequest request = objectFactory.createAddDepartmentRequest();
        request.setName(department.getName());

        JAXBElement<String> response = (JAXBElement<String>) getWebServiceTemplate().marshalSendAndReceive(request);

        if (!response.getValue().equals("Success"))
            throw new WebServiceFaultException("Error create department");

    }

    /**
     * Method perform request to SOAP service to get department entity with the same id
     * @param id ID of the target department
     * @return Department entity
     */
    @Override
    public Department getDepartmentById(int id) {

        GetDepartmentByIdRequest request = objectFactory.createGetDepartmentByIdRequest();
        request.setDepartmentId(id);

        GetDepartmentByIdResponse response = (GetDepartmentByIdResponse) getWebServiceTemplate().marshalSendAndReceive(request);

        return SchemaConversionUtils.toModelType(response.getDepartment());
    }

    /**
     * Method perform request to SOAP service to get an array of all departments
     * @return Array of departments entity
     */
    @Override
    public Department[] getDepartments() {
        logger.debug("getDepartments was called");
        JAXBElement<String> request = objectFactory.createGetAllDepartmentsRequest("test");
        logger.debug("...1...");
        GetAllDepartmentsResponse response = (GetAllDepartmentsResponse) getWebServiceTemplate().marshalSendAndReceive(request);
        logger.debug("...2...");
        List<com.pai.ClientSchema.Department> list = response.getDepartment();
        logger.debug("Serice return: " + list.size());
        List<Department> departments = new ArrayList<>();
        for (com.pai.ClientSchema.Department department:list){
            departments.add(SchemaConversionUtils.toModelType(department));
        }
        return departments.toArray(new Department[departments.size()]);
    }

    /**
     * Method perform request to SOAP service for updating department
     * @param department entity of the modified department
     */
    @Override
    public void updateDepartment(Department department) {

        UpdateDepartmentRequest request = objectFactory.createUpdateDepartmentRequest();
        request.setDepartment(SchemaConversionUtils.toSchemaType(department));

        JAXBElement<String> response = (JAXBElement<String>) getWebServiceTemplate().marshalSendAndReceive(request);

        if (!response.getValue().equals("Success"))
            throw new WebServiceFaultException("Error update department");
    }

    /**
     * Method perform request to SOAP service for delete department
     * @param id of the deletable department
     */
    @Override
    public void deleteDepartmentById(int id) {

        DeleteDepartmentRequest request = objectFactory.createDeleteDepartmentRequest();
        request.setDepartmentId(id);

        JAXBElement<String> response = (JAXBElement<String>) getWebServiceTemplate().marshalSendAndReceive(request);

        if (!response.getValue().equals("Success"))
            throw new WebServiceFaultException("Error delete department");

    }

    /**
     * Method perform request to SOAP service for create employee
     * @param employee entity of the created employee
     */
    @Override
    public void createEmployee(Employee employee) {

        AddEmployeeRequest request = objectFactory.createAddEmployeeRequest();
        com.pai.ClientSchema.Employee schema_employee;
        try {
            schema_employee = SchemaConversionUtils.toSchemaType(employee);
        } catch (DatatypeConfigurationException e) {
            throw new WebServiceFaultException("Error convertion employee object: " + e.toString());
        }
        request.setFullName(schema_employee.getFullName());
        request.setDateOfBirth(schema_employee.getDateOfBirth());
        request.setDepartmentId(schema_employee.getDepartmentId());
        request.setSalary(schema_employee.getSalary());

        JAXBElement<String> response = (JAXBElement<String>) getWebServiceTemplate().marshalSendAndReceive(request);

        if (!response.getValue().equals("Success"))
            throw new WebServiceFaultException("Error create employee");

    }

    /**
     * Method perform request to SOAP service to get employee entity with the same id
     * @param id ID of the target employee
     * @return employee entity
     */
    @Override
    public Employee getEmployeeById(int id) {

        GetEmployeesByIdRequest request = objectFactory.createGetEmployeesByIdRequest();
        request.setEmployeeId(id);

        GetEmployeesByIdResponse response = (GetEmployeesByIdResponse) getWebServiceTemplate().marshalSendAndReceive(request);

        return SchemaConversionUtils.toModelType(response.getEmployee());
    }

    /**
     * Method perform request to SOAP service to get an array of
     * employees of the target department
     *
     * @param id ID of the target department
     * @return array of emploees entity
     */
    @Override
    public Employee[] getEmployeesByDepartmentId(int id) {

        GetEmployeesByDepartmentIdRequest request = objectFactory.createGetEmployeesByDepartmentIdRequest();
        request.setDepartmentId(id);

        GetEmployeesByDepartmentIdResponse response = (GetEmployeesByDepartmentIdResponse) getWebServiceTemplate().marshalSendAndReceive(request);

        List<com.pai.ClientSchema.Employee> list = response.getEmployee();
        List<Employee> employees = new ArrayList<>();

        for (com.pai.ClientSchema.Employee employee:list){
            employees.add(SchemaConversionUtils.toModelType(employee));
        }

        return employees.toArray(new Employee[employees.size()]);
    }

    /**
     * Method perform request to SOAP service for updating employee
     * @param employee entity of the modified employee
     */
    @Override
    public void updateEmployee(Employee employee) {

        UpdateEmployeeRequest request = objectFactory.createUpdateEmployeeRequest();

        com.pai.ClientSchema.Employee schema_employee;
        try {
            schema_employee = SchemaConversionUtils.toSchemaType(employee);
        } catch (DatatypeConfigurationException e) {
            throw new WebServiceFaultException("Error convertion employee object: " + e.toString());
        }

        request.setEmployee(schema_employee);

        JAXBElement<String> response = (JAXBElement<String>) getWebServiceTemplate().marshalSendAndReceive(request);

        if (!response.getValue().equals("Success"))
            throw new WebServiceFaultException("Error update employee");

    }

    /**
     * Method perform request to SOAP service for removal employee with the same id
     * @param id ID of the deletable employee
     */
    @Override
    public void deleteEmployeeById(int id) {

        DeleteEmployeeRequest request = objectFactory.createDeleteEmployeeRequest();
        request.setEmployeeId(id);

        JAXBElement<String> response = (JAXBElement<String>) getWebServiceTemplate().marshalSendAndReceive(request);

        if (!response.getValue().equals("Success"))
            throw new WebServiceFaultException("Error delete employee");
    }
}
